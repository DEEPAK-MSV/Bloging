const express = require('express');
const multer = require('multer');
const path = require('path');
const jwt = require('jsonwebtoken');
const sequelize = require('./database');
const User = require('./User');
const Post = require('./posts');
const { Op } = require('sequelize');
const crypto = require('crypto');
const fs = require('fs');

sequelize.sync().then(() => console.log('Database is ready'));

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

app.post('/users', async (req, res) => {
  await User.create(req.body);
  res.send('User created');
});

app.get('/users', async (req, res) => {
  const users = await User.findAll();
  res.send(users);
});

app.put('/users/:email', async (req, res) => {
  const requestedEmail = req.params.email;
  const user = await User.findOne({ where: { email: requestedEmail } });
  user.username = req.body.username;
  await user.save();
  res.send('User updated');
});

app.delete('/users/:email', async (req, res) => {
  const requestedEmail = req.params.email;
  await User.destroy({ where: { email: requestedEmail } });
  res.send('User removed');
});

app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // validate the credentials (db)
  const user = await User.findOne({
    where: {
      email: { [Op.eq]: email },
      password: { [Op.eq]: password },
    },
  });

  if (user === null) {
    res.json({ message: 'email or password invalid', status: 'failed' });
    return;
  }

  // create a jwt token
  const token = jwt.sign({ userId: user.id }, 'super-secret', { expiresIn: '1d' });

  // add the token to the response and send it
  res.json({ status: 'ok', token: token });
});

function generateRandomString(length) {
  return crypto.randomBytes(length).toString('hex');
}

// Create a new post
app.post('/posts', upload.single('image'), async (req, res) => {
  const { title, content } = req.body;
  const token = req.headers['authorization'].split(' ')[1];
  console.log('token', token);
  const decoded = jwt.verify(token, 'super-secret');
  console.log(decoded);
  const user = await User.findByPk(decoded.userId);
  console.log('user', user);

  if (!user) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  let imageUrl = null;
  if (req.file) {
    const randomString = generateRandomString(8);
    const fileExtension = path.extname(req.file.originalname);
    const fileName = `${randomString}${fileExtension}`;
    const imagePath = path.join(__dirname, 'uploads', fileName);
    await fs.promises.rename(req.file.path, imagePath);
    imageUrl = fileName;
  }

  const post = await Post.create({
    title,
    content,
    imageUrl: imageUrl,
    userId: user.id,
  });
  res.json(post);
});

// Get all posts
app.get('/posts', async (req, res) => {
  const posts = await Post.findAll({
    include: [{ model: User, attributes: ['id', 'f_name', 'email'] }],
  });
  res.json(posts);
});

// create separate route for getting images
app.get('/image/:imageName', (req, res) => {
  const imageName = req.params.imageName;
  const imagePath = path.join(__dirname, 'uploads', imageName);
  res.sendFile(imagePath);
});

app.listen(3000, () => {
  console.log('App is running');
});
